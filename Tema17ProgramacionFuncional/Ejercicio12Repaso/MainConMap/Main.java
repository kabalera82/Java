package Tema17ProgramacionFuncional.Ejercicio12Repaso.MainConMap;

import Tema17ProgramacionFuncional.Ejercicio12Repaso.producto.Producto;

import java.util.*;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {

        List<Producto> listaProductos = Arrays.asList(
                new Producto("Manzana", "frutas", 10, 2.50),
                new Producto("Pl√°tano", "frutas", 12, 3.60),
                new Producto("Naranja", "frutas", 15, 2.70),
                new Producto("Mel√≥n", "frutas", 5, 1.80),
                new Producto("Fresas", "frutas", 8, 2.50),
                new Producto("Kiwi", "frutas", 10, 1.10),
                new Producto("Leche", "lacteos", 20, 1.20),
                new Producto("Yogur", "lacteos", 30, 0.80),
                new Producto("Queso", "lacteos", 6, 2.50),
                new Producto("Mantequilla", "lacteos", 7, 1.90),
                new Producto("K√©fir", "lacteos", 9, 1.50),
                new Producto("Nata", "lacteos", 11, 1.60),
                new Producto("Pan blanco", "panader√≠a", 10, 1.10),
                new Producto("Pan integral", "panader√≠a", 8, 1.30),
                new Producto("Baguette", "panader√≠a", 14, 1.00),
                new Producto("Croissant", "panader√≠a", 12, 1.20),
                new Producto("Pan de molde", "panader√≠a", 10, 1.50),
                new Producto("Pan sin gluten", "panader√≠a", 5, 2.00),
                new Producto("Uvas", "frutas", 7, 2.00),
                new Producto("Cerezas", "frutas", 4, 2.80),
                new Producto("Reques√≥n", "lacteos", 6, 1.40),
                new Producto("Brie", "lacteos", 3, 3.20),
                new Producto("Pan de centeno", "panader√≠a", 9, 1.60),
                new Producto("Donut", "panader√≠a", 13, 1.00),
                new Producto("Pi√±a", "frutas", 6, 2.10),
                new Producto("Melocot√≥n", "frutas", 8, 1.30),
                new Producto("Danonino", "lacteos", 15, 0.90),
                new Producto("Rollito", "panader√≠a", 10, 0.60),
                new Producto("Tarta de queso", "panader√≠a", 2, 3.50),
                new Producto("Pan r√∫stico", "panader√≠a", 7, 1.80)
        );

        // 1. Filtrar por categor√≠a
        List<Producto> frutas = listaProductos.stream()
                .filter(p -> p.getTipo().equalsIgnoreCase("frutas"))
                .toList();

        List<Producto> lacteos = listaProductos.stream()
                .filter(p -> p.getTipo().equalsIgnoreCase("lacteos"))
                .toList();

        List<Producto> panaderia = listaProductos.stream()
                .filter(p -> p.getTipo().equalsIgnoreCase("panader√≠a"))
                .toList();

        // 2. Mostrar productos por categor√≠a
        System.out.println("\n--- FRUTAS ---");
        frutas.forEach(System.out::println);

        System.out.println("\n--- L√ÅCTEOS ---");
        lacteos.forEach(System.out::println);

        System.out.println("\n--- PANADER√çA ---");
        panaderia.forEach(System.out::println);

        // 3. Producto m√°s barato
        listaProductos.stream()
                .min(Comparator.comparingDouble(Producto::getPrecio))
                .ifPresent(p -> System.out.println("\nüü¢ Producto m√°s barato: " + p));

        // Producto m√°s caro
        listaProductos.stream()
                .max(Comparator.comparingDouble(Producto::getPrecio))
                .ifPresent(p -> System.out.println("\nüî¥ Producto m√°s caro: " + p));

        // 4. Precio total por categor√≠a
        double totalFrutas = frutas.stream()
                .mapToDouble(Producto::getPrecio)
                .sum();
        double totalLacteos = lacteos.stream()
                .mapToDouble(Producto::getPrecio)
                .sum();
        double totalPanaderia = panaderia.stream()
                .mapToDouble(Producto::getPrecio)
                .sum();

        System.out.printf("\nüí∞ Total Frutas: %.2f ‚Ç¨\n", totalFrutas);
        System.out.printf("üí∞ Total L√°cteos: %.2f ‚Ç¨\n", totalLacteos);
        System.out.printf("üí∞ Total Panader√≠a: %.2f ‚Ç¨\n", totalPanaderia);

        // 5. Precio promedio por categor√≠a
        frutas.stream()
                .mapToDouble(Producto::getPrecio)
                .average()
                .ifPresent(avg -> System.out.printf("\nüìä Promedio Frutas: %.2f ‚Ç¨\n", avg));

        lacteos.stream()
                .mapToDouble(Producto::getPrecio)
                .average()
                .ifPresent(avg -> System.out.printf("üìä Promedio L√°cteos: %.2f ‚Ç¨\n", avg));

        panaderia.stream()
                .mapToDouble(Producto::getPrecio)
                .average()
                .ifPresent(avg -> System.out.printf("üìä Promedio Panader√≠a: %.2f ‚Ç¨\n", avg));

        // 6. Agrupaci√≥n por categor√≠a
        Map<String, List<Producto>> agrupado = listaProductos.parallelStream()
                .collect(Collectors.groupingBy(Producto::getTipo));

        System.out.println("\nüì¶ Agrupaci√≥n por categor√≠a:");
        agrupado.forEach((categoria, productos) -> {
            System.out.println("üëâ " + categoria + ": " + productos.size() + " productos");
        });

        // 7. Promedio m√°s alto de todas las categor√≠as
        agrupado.entrySet().stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        entry -> entry.getValue().stream()
                                .mapToDouble(Producto::getPrecio)
                                .average().orElse(0.0)
                ))
                .entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .ifPresent(entry -> System.out.printf("\nüèÜ Categor√≠a con promedio m√°s alto: %s (%.2f ‚Ç¨)\n",
                        entry.getKey(), entry.getValue()));
    }
}
