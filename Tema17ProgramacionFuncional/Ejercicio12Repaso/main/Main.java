package Tema17ProgramacionFuncional.Ejercicio12Repaso.main;

import Tema17ProgramacionFuncional.Ejercicio12Repaso.producto.Producto;

import java.util.*;
import java.util.stream.Collectors;

/*
 * Aplicaci√≥n para gesti√≥n de productos alimentarios.
 * Se trabaja con listas de productos divididos en categor√≠as ("frutas", "l√°cteos", "panader√≠a").
 * Objetivos:
 * 1. Filtrar productos por categor√≠a
 * 2. Calcular el precio total de una categor√≠a
 * 3. Obtener el producto m√°s barato
 * 4. Agrupar productos por categor√≠a
 * 5. Calcular el precio promedio por categor√≠a y encontrar el m√°s alto
 * 6. Usar paralelizaci√≥n cuando sea posible para rendimiento
 */

public class Main {

    public static void main(String[] args) {
        // 1. Obtener la lista completa de productos
        List<Producto> listaProductos = obtenerProductos(); // ‚úÖ SOLO UNA VEZ

        // 2. Filtrar por categor√≠a
        List<Producto> frutas = filtrarCategorias(listaProductos, "frutas");
        List<Producto> lacteos = filtrarCategorias(listaProductos, "lacteos");
        List<Producto> panaderia = filtrarCategorias(listaProductos, "panader√≠a");

        // 3. Mostrar los productos por categor√≠a
        System.out.println("\n--- FRUTAS ---");
        frutas.forEach(System.out::println);

        System.out.println("\n--- L√ÅCTEOS ---");
        lacteos.forEach(System.out::println);

        System.out.println("\n--- PANADER√çA ---");
        panaderia.forEach(System.out::println);

        // 4. Calcular:
        // a) El mas barato.
        Optional<Producto> masBarato = obtenerMasBarato(listaProductos);
        masBarato.ifPresent(p -> System.out.println("\nüü¢ Producto m√°s barato: " + p));
        // b) El mas caro.
        Optional<Producto> masCaro = obtenerMasCaro(listaProductos);
        masCaro.ifPresent(p -> System.out.println("\nüî¥ Producto m√°s caro: " + p));

        // 5. Calcular el precio total de cada categor√≠a
        totalCategoria("Frutas", frutas);
        totalCategoria("L√°cteos", lacteos);
        totalCategoria("Panader√≠a", panaderia);


        // 6. Calcular el precio promedio por categor√≠a
        calcularPromedio("Frutas", frutas);
        calcularPromedio("L√°cteos", lacteos);
        calcularPromedio("Panader√≠a", panaderia);


        // 7. Agrupar por categor√≠a (por si se necesitara m√°s adelante)
        Map<String, List<Producto>> agrupado = listaProductos.parallelStream()
                .collect(Collectors.groupingBy(Producto::getTipo));
        System.out.println("\nüì¶ Agrupaci√≥n por categor√≠a:");
        agrupado.forEach((categoria, productos) -> {
            System.out.println("üëâ " + categoria + ": " + productos.size() + " productos");
        });
    }

    private static List<Producto> filtrarCategorias(List<Producto> productos, String tipo) {
        return productos.parallelStream()
                .filter(p -> p.getTipo().equalsIgnoreCase(tipo))
                .toList();
    }

    private static Optional<Producto> obtenerMasBarato(List<Producto> productos) {
        return productos.parallelStream()
                .min(Comparator.comparingDouble(Producto::getPrecio));
    }

    private static Optional<Producto> obtenerMasCaro(List<Producto> productos) {
        return productos.parallelStream()
                .max(Comparator.comparingDouble(Producto::getPrecio));
    }

    private static void totalCategoria(String categoria, List<Producto> productos) {
        double total = productos.parallelStream()
                .mapToDouble(Producto::getPrecio)
                .sum();

        System.out.printf("üí∞ Precio total de %s: %.2f\n", categoria, total);
    }

    private static void calcularPromedio(String categoria, List<Producto> productos) {
        productos.parallelStream()
                .mapToDouble(Producto::getPrecio)
                .average()
                .ifPresent(avg -> System.out.printf("üìä Precio promedio de %s: %.2f\n", categoria, avg));
    }

    //Datos en un metodo
    private static List<Producto> obtenerProductos() {
        return Arrays.asList(
                new Producto("Manzana", "frutas", 10, 2.50),
                new Producto("Pl√°tano", "frutas", 12, 3.60),
                new Producto("Naranja", "frutas", 15, 2.70),
                new Producto("Mel√≥n", "frutas", 5, 1.80),
                new Producto("Fresas", "frutas", 8, 2.50),
                new Producto("Kiwi", "frutas", 10, 1.10),
                new Producto("Leche", "lacteos", 20, 1.20),
                new Producto("Yogur", "lacteos", 30, 0.80),
                new Producto("Queso", "lacteos", 6, 2.50),
                new Producto("Mantequilla", "lacteos", 7, 1.90),
                new Producto("K√©fir", "lacteos", 9, 1.50),
                new Producto("Nata", "lacteos", 11, 1.60),
                new Producto("Pan blanco", "panader√≠a", 10, 1.10),
                new Producto("Pan integral", "panader√≠a", 8, 1.30),
                new Producto("Baguette", "panader√≠a", 14, 1.00),
                new Producto("Croissant", "panader√≠a", 12, 1.20),
                new Producto("Pan de molde", "panader√≠a", 10, 1.50),
                new Producto("Pan sin gluten", "panader√≠a", 5, 2.00),
                new Producto("Uvas", "frutas", 7, 2.00),
                new Producto("Cerezas", "frutas", 4, 2.80),
                new Producto("Reques√≥n", "lacteos", 6, 1.40),
                new Producto("Brie", "lacteos", 3, 3.20),
                new Producto("Pan de centeno", "panader√≠a", 9, 1.60),
                new Producto("Donut", "panader√≠a", 13, 1.00),
                new Producto("Pi√±a", "frutas", 6, 2.10),
                new Producto("Melocot√≥n", "frutas", 8, 1.30),
                new Producto("Danonino", "lacteos", 15, 0.90),
                new Producto("Rollito", "panader√≠a", 10, 0.60),
                new Producto("Tarta de queso", "panader√≠a", 2, 3.50),
                new Producto("Pan r√∫stico", "panader√≠a", 7, 1.80)
        );
    }
}
